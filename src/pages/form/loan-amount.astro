---
import FormLayout from '../../components/FormLayout.astro';
import { saveFormState, getFormValue } from '../../lib/form-state';

// Get loan reason from query params
const loanReason = Astro.url.searchParams.get('loan_reason');

// Save to form state
if (loanReason) {
  saveFormState({ loan_reason: loanReason });
}

// Get previous value if it exists
const previousAmount = getFormValue('loan_amount');

// Page metadata
const title = 'Enter Your Loan Amount | ApprovedOffers';
const description =
  'Choose your desired loan amount between $250 and $100,000. Get personalized loan offers with no impact on your credit score.';
---

<FormLayout
  currentStep="loan-amount"
  title="How much would you like to borrow?"
  pageTitle={title}
  pageDescription={description}
>
  <p class="subtitle">Enter an amount between $250 and $100,000</p>

  <form
    method="GET"
    action={`/form/housing?loan_reason=${encodeURIComponent(loanReason || '')}`}
    class="loan-form"
  >
    <input type="hidden" name="loan_reason" value={loanReason} />

    <div class="form-group">
      <label for="loan_amount" class="sr-only">Loan amount</label>
      <div class="amount-input">
        <span class="currency" aria-hidden="true">$</span>
        <input
          type="text"
          inputmode="numeric"
          id="loan_amount"
          name="loan_amount"
          data-min="250"
          data-max="100000"
          placeholder="5,000"
          required
          pattern="^\$?\d{1,3}(,\d{3})*(\.\d+)?$"
          autocomplete="off"
          value={previousAmount}
          aria-describedby="amount-range"
        />
        <input
          type="hidden"
          id="loan_amount_raw"
          name="loan_amount_raw"
          value={previousAmount?.replace(/\D/g, '')}
        />
      </div>
      <div class="amount-range" id="amount-range">$250 - $100,000</div>
    </div>

    <div class="preset-amounts">
      <p class="preset-label" id="preset-label">Or pick a common amount:</p>
      <div class="preset-grid" role="group" aria-labelledby="preset-label">
        <button type="button" class="preset-button" data-amount="5000">$5,000</button>
        <button type="button" class="preset-button" data-amount="7500">$7,500</button>
        <button type="button" class="preset-button" data-amount="10000">$10,000</button>
        <button type="button" class="preset-button" data-amount="15000">$15,000</button>
        <button type="button" class="preset-button" data-amount="20000">$20,000</button>
        <button type="button" class="preset-button" data-amount="25000">$25,000</button>
        <button type="button" class="preset-button" data-amount="30000">$30,000</button>
        <button type="button" class="preset-button" data-amount="35000">$35,000</button>
        <button type="button" class="preset-button" data-amount="50000">$50,000</button>
      </div>
    </div>

    <div class="trust-message" role="note">
      <span class="lock-icon" aria-hidden="true">ðŸ”’</span>
      <p>Checking rates won't affect your credit score</p>
    </div>

    <div class="form-actions">
      <button type="button" onclick="window.location.href='/'" class="button button-back">Back</button>
      <button type="submit" class="button">Continue</button>
    </div>
  </form>
</FormLayout>

<style>
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .subtitle {
    color: var(--color-muted);
    margin-bottom: 2rem;
    font-size: 0.875rem;
  }

  .form-group {
    margin-bottom: 2rem;
  }

  .amount-input {
    position: relative;
  }

  .currency {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-text);
    font-weight: 500;
  }

  input[type='text'] {
    width: 100%;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid var(--color-border);
    color: var(--color-text);
    padding: 1.25rem 1.25rem 1.25rem 2.5rem;
    border-radius: 0.75rem;
    font-size: 1.5rem;
    transition: all 0.2s;
    font-weight: 500;
  }

  input[type='text']:hover {
    border-color: var(--color-accent);
  }

  input[type='text']:focus {
    outline: none;
    border-color: var(--color-accent);
    background-color: rgba(255, 255, 255, 0.1);
  }

  .amount-range {
    margin-top: 0.5rem;
    color: var(--color-muted);
    font-size: 0.875rem;
  }

  .preset-amounts {
    margin-bottom: 2rem;
  }

  .preset-label {
    color: var(--color-muted);
    font-size: 0.875rem;
    margin-bottom: 1rem;
  }

  .preset-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.75rem;
  }

  .preset-button {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid var(--color-border);
    color: var(--color-text);
    padding: 0.75rem;
    border-radius: 0.75rem;
    font-size: 1rem;
    transition: all 0.2s;
    cursor: pointer;
  }

  .preset-button:hover {
    border-color: var(--color-accent);
    background: rgba(255, 255, 255, 0.1);
  }

  .preset-button.selected {
    border-color: var(--color-accent);
    background: rgba(255, 255, 255, 0.1);
  }

  .trust-message {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 0.75rem;
    margin-bottom: 2rem;
  }

  .lock-icon {
    font-size: 1.25rem;
  }

  .trust-message p {
    color: var(--color-muted);
    font-size: 0.875rem;
    margin: 0;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
  }

  .button {
    flex: 1;
    background: var(--color-accent);
    color: var(--color-background);
    padding: 1rem;
    border: none;
    border-radius: 0.75rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    text-align: center;
    text-decoration: none;
  }

  .button:hover {
    opacity: 0.9;
    transform: translateY(-2px);
  }

  .button-back {
    background: rgba(255, 255, 255, 0.1);
    color: var(--color-text);
  }

  @media (max-width: 768px) {
    input[type='text'] {
      font-size: 1.25rem;
      padding: 1rem 1rem 1rem 2.25rem;
    }

    .preset-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<script>
  function formatNumber(value) {
    const number = value.replace(/\D/g, '');
    return new Intl.NumberFormat('en-US').format(number);
  }

  function handleAmountInput(input, hiddenInput) {
    let cursorPosition = input.selectionStart;
    const previousLength = input.value.length;
    let value = input.value.replace(/\D/g, '');
    const formatted = formatNumber(value);
    input.value = formatted;
    hiddenInput.value = value;
    const addedChars = input.value.length - previousLength;
    cursorPosition += addedChars;
    input.setSelectionRange(cursorPosition, cursorPosition);

    if (input.dataset.min || input.dataset.max) {
      const numValue = parseInt(value) || 0;
      const min = parseInt(input.dataset.min) || 0;
      const max = parseInt(input.dataset.max) || Infinity;
      if (numValue < min) {
        input.setCustomValidity(`Minimum amount is $${formatNumber(min.toString())}`);
      } else if (numValue > max) {
        input.setCustomValidity(`Maximum amount is $${formatNumber(max.toString())}`);
      } else {
        input.setCustomValidity('');
      }
    }
  }

  const loanAmountInput = document.getElementById('loan_amount');
  const loanAmountRaw   = document.getElementById('loan_amount_raw');
  if (loanAmountInput && loanAmountRaw) {
    loanAmountInput.addEventListener('input', () =>
      handleAmountInput(loanAmountInput, loanAmountRaw)
    );
    loanAmountInput.addEventListener('focus', () => {
      if (!loanAmountInput.value) {
        loanAmountInput.value = '';
      }
    });
  }

  document.querySelectorAll('.preset-button').forEach((button) => {
    button.addEventListener('click', () => {
      const amount = button.dataset.amount;
      loanAmountInput.value = formatNumber(amount);
      loanAmountRaw.value   = amount;
      document.querySelectorAll('.preset-button').forEach((btn) => btn.classList.remove('selected'));
      button.classList.add('selected');
    });
  });

  document.querySelector('.loan-form').addEventListener('submit', (e) => {
    const amount = document.getElementById('loan_amount_raw').value;
    if (!amount) {
      e.preventDefault();
      return false;
    }
    sessionStorage.setItem(
      'form-state',
      JSON.stringify({
        ...JSON.parse(sessionStorage.getItem('form-state') || '{}'),
        loan_amount: amount,
      })
    );
  });
</script>
